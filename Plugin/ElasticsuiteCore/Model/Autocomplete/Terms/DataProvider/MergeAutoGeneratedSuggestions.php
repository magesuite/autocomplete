<?php

namespace MageSuite\Autocomplete\Plugin\ElasticsuiteCore\Model\Autocomplete\Terms\DataProvider;

class MergeAutoGeneratedSuggestions
{
    protected \MageSuite\Autocomplete\Helper\Configuration $configuration;
    protected \MageSuite\Autocomplete\Model\Autocomplete\SuggestedPhrasesProvider $suggestedPhrasesProvider;
    protected \Magento\Search\Model\Autocomplete\ItemFactory $itemFactory;
    protected \Magento\Search\Model\QueryFactory $queryFactory;
    protected \Smile\ElasticsuiteCore\Helper\Autocomplete $maxSizeConfiguration;

    public function __construct(
        \MageSuite\Autocomplete\Helper\Configuration $configuration,
        \MageSuite\Autocomplete\Model\Autocomplete\SuggestedPhrasesProvider $suggestedPhrasesProvider,
        \Magento\Search\Model\Autocomplete\ItemFactory $itemFactory,
        \Magento\Search\Model\QueryFactory $queryFactory,
        \Smile\ElasticsuiteCore\Helper\Autocomplete $maxSizeConfiguration
    ) {
        $this->configuration = $configuration;
        $this->itemFactory = $itemFactory;
        $this->maxSizeConfiguration = $maxSizeConfiguration;
        $this->queryFactory = $queryFactory;
        $this->suggestedPhrasesProvider = $suggestedPhrasesProvider;
    }

    public function afterGetItems(\Smile\ElasticsuiteCore\Model\Autocomplete\Terms\DataProvider $subject, $result)
    {
        if (!$this->configuration->isGenerationEnabled()) {
            return $result;
        }

        $query = $this->queryFactory->get();
        $suggestedPhrases = $this->suggestedPhrasesProvider->getSuggestions($query->getQueryText());

        foreach ($suggestedPhrases as $phrase) {
            if ($this->phraseExist($result, $phrase->getPhrase())) {
                continue;
            }

            $result[] = $this->itemFactory->create([
                'title' => $phrase->getPhrase(),
                'num_results' => $phrase->getProductsCount(),
                'type' => 'term',
                'url' => sprintf('catalogsearch/result/?q=%s', strtolower($phrase->getPhrase())),
            ]);
        }

        usort($result, [$this, 'sortByNumResults']);

        $maxSize = $this->maxSizeConfiguration->getMaxSize('term');

        if (count($result) > $maxSize) {
            $result = array_slice($result, 0, $maxSize);
        }

        return $result;
    }

    protected function phraseExist($result, string $suggestedPhrase): bool
    {
        foreach ($result as $item) {
            $title = $item->getTitle();

            if ($this->configuration->isBoldingOfSearchQueryEnabled()) {
                $title = \str_replace(['<strong>', '</strong>'], '', $title);
            }

            if (mb_strtolower($title) === mb_strtolower($suggestedPhrase)) {
                return true;
            }
        }

        return false;
    }

    protected function sortByNumResults($first, $second): int
    {
        if ($first->getNumResults() == $second->getNumResults()) {
            return 0;
        }

        return ($first->getNumResults() > $second->getNumResults()) ? -1 : 1;
    }
}
